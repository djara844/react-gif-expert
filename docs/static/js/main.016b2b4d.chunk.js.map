{"version":3,"sources":["components/AdCategory.js","components/GridGifItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AdCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GridGifItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GrifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","ReacDOOM","render","document","querySelector"],"mappings":"6LA+BeA,EA5BI,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACJC,mBAAS,IADL,mBACjCC,EADiC,KACrBC,EADqB,KAexC,OACE,oCACE,0BAAMC,SAVW,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,SAO5C,2BAAOC,KAAK,OAAOC,MAAOT,EAAYU,SAflB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,aCMZG,EAXK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,oCACE,yBAAKC,UAAU,4DACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,M,uBCPCK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UACpDF,GAFmB,+DAIFG,MAAMR,GAJJ,cAIfS,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAKc,EAAIE,OAAOC,iBAAiBjB,QAXhB,kBAcdY,GAdc,4CAAH,sDCuBLM,EAlBE,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECFP,SAACA,GAAc,IAAD,EACdpB,mBAAS,CACjC0B,KAAM,GACNQ,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAACP,GAAD,OACrBK,EAAS,CACPV,KAAMK,EACNG,SAAS,SAGZ,CAACd,IAEGe,EDZ2BI,CAAanB,GAAjCW,EADmB,EACzBL,KAAcQ,EADW,EACXA,QAEtB,OACE,oCACE,4BAAKd,GACJc,GACC,uBAAGlB,UAAU,mCAAb,eAEF,yBAAKA,UAAU,aACZe,EAAOH,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAaW,IAAKX,EAAIC,IAAQD,UEUzBY,EAtBM,WAAM,MAEWzC,mBAAS,CAAC,gBAFrB,mBAElBQ,EAFkB,KAENT,EAFM,KAOzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAYA,cAAeA,IAC3B,6BAEA,4BACGS,EAAWoB,KAAI,SAACR,GAAD,OACd,kBAAC,EAAD,CAAUA,SAAUA,EAAUoB,IAAKpB,U,MCb7CsB,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,cAAc,W","file":"static/js/main.016b2b4d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AdCategory = ({ setCategories }) => {\n  const [inputValue, setinputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setinputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n      </form>\n    </>\n  );\n};\n\nAdCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AdCategory;\n","import React from \"react\";\n\nconst GridGifItem = ({ title, url }) => {\n  return (\n    <>\n      <div className=\"card animate__animated animate__bounce animate__delay-1s\">\n        <img src={url} alt={title} />\n        <p>{title}</p>\n      </div>\n    </>\n  );\n};\n\nexport default GridGifItem;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&api_key=KkPf3eYUG3ds6bh3EpcOAR5kCMIYzDY5&limit=10`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import React from \"react\";\nimport GridGifItem from \"./GridGifItem\";\n\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nconst GrifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && (\n        <p className=\"animate_animated animate__flash\">Cargando...</p>\n      )}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GridGifItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GrifGrid;\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((images) =>\n      setState({\n        data: images,\n        loading: false,\n      })\n    );\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AdCategory from \"./components/AdCategory\";\nimport GrifGrid from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  //const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"];\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\n\n  //   const handleAdd = () => {\n  //     setCategories([...categories, \"FÃºtbol\"]);\n  //   };\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AdCategory setCategories={setCategories} />\n      <hr />\n      {/* <button onClick={handleAdd}>Agregar</button> */}\n      <ol>\n        {categories.map((category) => (\n          <GrifGrid category={category} key={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReacDOOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nimport \"./index.css\";\n\nReacDOOM.render(<GifExpertApp />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}